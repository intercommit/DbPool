/*  Copyright 2011 InterCommIT b.v.
*
*  This file is part of the "DbPool" project hosted on https://github.com/intercommit/DbPool
*
*  DbPool is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Lesser General Public License as published by
*  the Free Software Foundation, either version 3 of the License, or
*  any later version.
*
*  DbPool is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Lesser General Public License for more details.
*
*  You should have received a copy of the GNU Lesser General Public License
*  along with Weaves.  If not, see <http://www.gnu.org/licenses/>.
*
*/
package nl.intercommit.dbpool;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import org.apache.log4j.Logger;

public class DbConn {

	public DbPool pool;
	public Connection conn;
	public PreparedStatement ps;
	public NamedParameterStatement nps;
	public ResultSet rs;
	public int connAcquireCount;
	public long connAcquireWaitTime;
	public long connAcquireMaxWaitTime;
	public long connAcquireMinWaitTime = Long.MAX_VALUE;
	
	public DbConn(DbPool pool) {
		super();
		this.pool = pool;
	}
	
	public void closeQuery() {
		close(rs); rs = null;
		close(ps); ps = null;
		close(nps); nps = null;
	}
	
	public PreparedStatement setQuery(String query) throws SQLException {
		return setQuery(query, -1);
	}
	
	public Connection getConnection() throws SQLException {
		
		if (conn == null) {
			final long tstart = System.currentTimeMillis();
			conn = pool.acquire();
			final long waitTime = (System.currentTimeMillis() - tstart);
			if (waitTime < connAcquireMinWaitTime) connAcquireMinWaitTime = waitTime;
			if (waitTime > connAcquireMaxWaitTime) connAcquireMaxWaitTime = waitTime;
			connAcquireWaitTime += waitTime;
			connAcquireCount++;
		}
		return conn;
	}
	
	public PreparedStatement setQuery(String query, int autoGeneratedKeys) throws SQLException {
		getConnection();
		if (ps != null) closeQuery();
		if (autoGeneratedKeys > -1)
			ps = conn.prepareStatement(query, autoGeneratedKeys);
		else 
			ps = conn.prepareStatement(query);
		return ps;
	}

	public NamedParameterStatement setNQuery(String query) throws SQLException {
		return setNQuery(query, -1);
	}
	public NamedParameterStatement setNQuery(String query, int autoGeneratedKeys) throws SQLException {
		getConnection();
		if (nps != null) closeQuery();
		if (autoGeneratedKeys > -1) 
			nps = new NamedParameterStatement(conn, query, autoGeneratedKeys);
		else 
			nps = new NamedParameterStatement(conn, query);
		return nps;
	}
	
	public void close() {
		close(rs); rs = null;
		close(ps); ps = null;
		close(nps); nps = null;
		if (pool != null) {
			pool.release(conn);
		} else {
			pool.close(conn);
		}
		conn = null;
	}
	
	public String getStats() {
		return (connAcquireCount > 0 ? "total leased: "+ connAcquireCount + " avg/min/max acquire time: " 
				+ (connAcquireWaitTime / connAcquireCount) + " / " + connAcquireMinWaitTime
				+ " / " + connAcquireMaxWaitTime : "no connections acquired");
	}
	
	public static Logger closeLogger = Logger.getLogger(DbConn.class);
	
	public static void close(Statement s) {
		if (s == null) return;
		try {
			s.close();
		} catch (SQLException se) {
			closeLogger.warn("Failed to close statement: " + s);
		}
	}

	public static void close(NamedParameterStatement s) {
		if (s == null) return;
		try {
			s.close();
		} catch (SQLException se) {
			closeLogger.warn("Failed to close named statement: " + s);
		}
	}
	
	public static void close(ResultSet rs) {
		if (rs == null) return;
		try {
			rs.close();
		} catch (SQLException se) {
			closeLogger.warn("Failed to close result set: " + rs);
		}
	}
}
