/*  Copyright 2011 InterCommIT b.v.
*
*  This file is part of the "DbPool" project hosted on https://github.com/intercommit/DbPool
*
*  DbPool is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Lesser General Public License as published by
*  the Free Software Foundation, either version 3 of the License, or
*  any later version.
*
*  DbPool is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Lesser General Public License for more details.
*
*  You should have received a copy of the GNU Lesser General Public License
*  along with DbPool.  If not, see <http://www.gnu.org/licenses/>.
*
*/
package nl.intercommit.dbpool;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import org.apache.log4j.Logger;

/**
 * A helper class that makes it easy to fire a query, get results and cleanup.
 * A typical usage scenario is the following (see also the test-classes): <pre>
 * DbConn c = new DbConn(myPool);
 * try {
 * 	c.setNQuery("select id from t where name like @name");
 * 	c.nps.setString("name", "searchValue");
 * 	c.rs = c.nps.executeQuery();
 * 	... process results ...
 * } catch (Exception e) {
 *   ... handle error ...
 * } finally { c.close(); }
 * </pre>
 * @author frederikw
 *
 */
public class DbConn {

	/** The database pool from the contructor. */
	public DbPool pool;
	/** An actual database connection, set when getConnection() is called. */
	public Connection conn;
	/** A prepared statement, set when setQuery() is called. */
	public PreparedStatement ps;
	/** A named prepared statement, set when setNQuery() is called. */
	public NamedParameterStatement nps;
	/** A resultset, can be used as placeholder for the query results of one query. */
	public ResultSet rs;
	
	public DbConn(DbPool pool) {
		super();
		this.pool = pool;
	}
	
	/** Closes rs, ps and nps (if not null), but does not release the database connection.
	 * Sets rs, ps and nps to null.
	 */
	public void closeQuery() {
		close(rs); rs = null;
		close(ps); ps = null;
		close(nps); nps = null;
	}
	
	/** Acquires a connection from the pool, but only when conn is null. */
	public Connection getConnection() throws SQLException {
		
		if (conn == null) {
			conn = pool.acquire();
		}
		return conn;
	}
	
	/** Sets ps with the given query. Gets a connection if conn is null. */
	public PreparedStatement setQuery(String query) throws SQLException {
		return setQuery(query, -1);
	}
	
	/** Sets nps with the given query. Gets a connection if conn is null. 
	 * If autoGeneratedKeys is -1, it is ignored, else if autoGeneratedKeys
	 * equals java.sql.Statement.RETURN_GENERATED_KEYS for example, 
	 * generated keys are returned in the resultset
	 * (how generated keys are returned depends on the type of database,
	 * e.g. mysql will return a column with the name "GENERATED_KEY").
	 */
	public PreparedStatement setQuery(String query, int autoGeneratedKeys) throws SQLException {
		getConnection();
		if (ps != null) closeQuery();
		if (autoGeneratedKeys > -1)
			ps = conn.prepareStatement(query, autoGeneratedKeys);
		else 
			ps = conn.prepareStatement(query);
		return ps;
	}

	/** Sets nps with the given query. Gets a connection if conn is null. */
	public NamedParameterStatement setNQuery(String query) throws SQLException {
		return setNQuery(query, -1);
	}
	/** Same as {@link#setQuery(String,int)}, but this time for a named query. */
	public NamedParameterStatement setNQuery(String query, int autoGeneratedKeys) throws SQLException {
		getConnection();
		if (nps != null) closeQuery();
		if (autoGeneratedKeys > -1) 
			nps = new NamedParameterStatement(conn, query, autoGeneratedKeys);
		else 
			nps = new NamedParameterStatement(conn, query);
		return nps;
	}
	
	/** Closes all open resources (rs, ps, nps) and releases the database connection
	 * (or, if there is no pool, closes the connection). 
	 * Sets rs, ps, nps and conn to null to that subsequent calls to this method have no effect. */
	public void close() {
		close(rs); rs = null;
		close(ps); ps = null;
		close(nps); nps = null;
		if (pool == null) {
			try { conn.close(); } catch (SQLException sqle) {
				closeLogger.warn("Failed to close a database connection: " + sqle);
			}
		} else {
			pool.release(conn);
		}
		conn = null;
	}
	
	/** Logger used to log a warning when needed by the close-methods. */ 
	public static Logger closeLogger = Logger.getLogger(DbConn.class);
	
	/** Closes s (checks for null-value), logs any error as warning using closeLogger. */
	public static void close(Statement s) {
		if (s == null) return;
		try {
			s.close();
		} catch (SQLException se) {
			closeLogger.warn("Failed to close statement: " + s);
		}
	}

	/** Closes s (checks for null-value), logs any error as warning using closeLogger. */
	public static void close(NamedParameterStatement s) {
		if (s == null) return;
		try {
			s.close();
		} catch (SQLException se) {
			closeLogger.warn("Failed to close named statement: " + s);
		}
	}
	
	/** Closes rs (checks for null-value), logs any error as warning using closeLogger. */
	public static void close(ResultSet rs) {
		if (rs == null) return;
		try {
			rs.close();
		} catch (SQLException se) {
			closeLogger.warn("Failed to close result set: " + rs);
		}
	}
}
